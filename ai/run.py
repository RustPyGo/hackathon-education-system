#!/usr/bin/env python3
"""
üöÄ Run script cho AI Education Question Generator
Kh·ªüi ƒë·ªông server v·ªõi c√°c t√πy ch·ªçn kh√°c nhau
"""

import os
import sys
import argparse
import subprocess
import signal
import time
from pathlib import Path

def print_header(text: str):
    """In header ƒë·∫πp"""
    print(f"\n{'='*60}")
    print(f"üöÄ {text}")
    print('='*60)

def print_success(text: str):
    """In th√¥ng b√°o th√†nh c√¥ng"""
    print(f"‚úÖ {text}")

def print_error(text: str):
    """In th√¥ng b√°o l·ªói"""
    print(f"‚ùå {text}")

def print_info(text: str):
    """In th√¥ng tin"""
    print(f"‚ÑπÔ∏è  {text}")

def check_env():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi ch·∫°y"""
    print_info("Ki·ªÉm tra m√¥i tr∆∞·ªùng...")
    
    # Check .env file
    env_file = Path(".env")
    if not env_file.exists():
        print_error(".env file kh√¥ng t·ªìn t·∫°i!")
        print_info("Ch·∫°y: python setup.py ƒë·ªÉ t·∫°o file .env")
        return False
    
    # Check API keys
    from dotenv import load_dotenv
    load_dotenv()
    
    openai_key = os.getenv("OPENAI_API_KEY")
    if not openai_key or openai_key == "your_openai_api_key_here":
        print_error("OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!")
        print_info("C·∫≠p nh·∫≠t API key trong file .env")
        return False
    
    # Check modules
    required_files = ["server.py", "genQ.py", "pdfToText.py", "chat.py"]
    for file_name in required_files:
        if not Path(file_name).exists():
            print_error(f"Kh√¥ng t√¨m th·∫•y file: {file_name}")
            return False
    
    print_success("M√¥i tr∆∞·ªùng OK")
    return True

def run_server(host="0.0.0.0", port=8000, reload=False, log_level="info"):
    """Ch·∫°y server"""
    print_header(f"Kh·ªüi ƒë·ªông AI Server t·∫°i {host}:{port}")
    
    # Build command
    cmd = [
        sys.executable, "server.py",
        "--host", host,
        "--port", str(port)
    ]
    
    if reload:
        cmd.append("--reload")
    
    # Set environment
    env = os.environ.copy()
    env["LOG_LEVEL"] = log_level.upper()
    
    try:
        print_info(f"Command: {' '.join(cmd)}")
        print_info("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
        print_info("C√≥ th·ªÉ truy c·∫≠p:")
        print(f"   üåê API: http://{host}:{port}")
        print(f"   üìö Docs: http://{host}:{port}/docs")
        print(f"   üîß Redoc: http://{host}:{port}/redoc")
        
        # Start server
        process = subprocess.Popen(cmd, env=env)
        
        # Wait for interrupt
        try:
            process.wait()
        except KeyboardInterrupt:
            print_info("ƒêang d·ª´ng server...")
            process.send_signal(signal.SIGTERM)
            process.wait()
            print_success("Server ƒë√£ d·ª´ng")
            
    except Exception as e:
        print_error(f"L·ªói ch·∫°y server: {e}")
        return False
    
    return True

def run_tests():
    """Ch·∫°y tests"""
    print_header("Ch·∫°y API Tests")
    
    try:
        cmd = [sys.executable, "test_api.py"]
        result = subprocess.run(cmd, check=True)
        print_success("Tests ho√†n th√†nh")
        return True
    except subprocess.CalledProcessError:
        print_error("Tests th·∫•t b·∫°i")
        return False
    except FileNotFoundError:
        print_error("Kh√¥ng t√¨m th·∫•y test_api.py")
        return False

def run_docker():
    """Ch·∫°y v·ªõi Docker"""
    print_header("Ch·∫°y v·ªõi Docker")
    
    try:
        # Check if Docker is available
        subprocess.run(["docker", "--version"], check=True, capture_output=True)
        
        print_info("Building Docker image...")
        subprocess.run(["docker", "build", "-t", "ai-question-generator", "."], check=True)
        
        print_info("Starting Docker container...")
        cmd = [
            "docker", "run", "-it", "--rm",
            "-p", "8000:8000",
            "--env-file", ".env",
            "ai-question-generator"
        ]
        
        subprocess.run(cmd, check=True)
        
    except subprocess.CalledProcessError as e:
        print_error(f"Docker command failed: {e}")
        return False
    except FileNotFoundError:
        print_error("Docker kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        return False

def run_docker_compose():
    """Ch·∫°y v·ªõi Docker Compose"""
    print_header("Ch·∫°y v·ªõi Docker Compose")
    
    try:
        # Check if docker-compose is available
        subprocess.run(["docker-compose", "--version"], check=True, capture_output=True)
        
        print_info("Starting services with docker-compose...")
        cmd = ["docker-compose", "up", "--build"]
        
        subprocess.run(cmd, check=True)
        
    except subprocess.CalledProcessError as e:
        print_error(f"Docker Compose command failed: {e}")
        return False
    except FileNotFoundError:
        print_error("Docker Compose kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        return False

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="üöÄ AI Education Question Generator Runner",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python run.py                          # Ch·∫°y server m·∫∑c ƒë·ªãnh
  python run.py --port 8080              # Ch·∫°y tr√™n port 8080  
  python run.py --reload                 # Ch·∫°y v·ªõi auto-reload
  python run.py --test                   # Ch·∫°y tests
  python run.py --docker                 # Ch·∫°y v·ªõi Docker
  python run.py --docker-compose         # Ch·∫°y v·ªõi Docker Compose
        """
    )
    
    parser.add_argument("--host", default="0.0.0.0", help="Host ƒë·ªÉ bind server")
    parser.add_argument("--port", type=int, default=8000, help="Port ƒë·ªÉ ch·∫°y server")
    parser.add_argument("--reload", action="store_true", help="Enable auto-reload")
    parser.add_argument("--log-level", default="info", choices=["debug", "info", "warning", "error"])
    parser.add_argument("--test", action="store_true", help="Ch·∫°y tests thay v√¨ server")
    parser.add_argument("--docker", action="store_true", help="Ch·∫°y v·ªõi Docker")
    parser.add_argument("--docker-compose", action="store_true", help="Ch·∫°y v·ªõi Docker Compose")
    parser.add_argument("--skip-check", action="store_true", help="B·ªè qua ki·ªÉm tra m√¥i tr∆∞·ªùng")
    
    args = parser.parse_args()
    
    # Check environment (unless skipped)
    if not args.skip_check and not args.docker and not args.docker_compose:
        if not check_env():
            print_error("Ki·ªÉm tra m√¥i tr∆∞·ªùng th·∫•t b·∫°i!")
            return False
    
    # Route to appropriate function
    if args.test:
        return run_tests()
    elif args.docker:
        return run_docker()
    elif args.docker_compose:
        return run_docker_compose()
    else:
        return run_server(
            host=args.host,
            port=args.port,
            reload=args.reload,
            log_level=args.log_level
        )

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print_info("B·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(0)
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        sys.exit(1)
