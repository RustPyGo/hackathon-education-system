#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script cho GenQ - ki·ªÉm tra vi·ªác sinh c√¢u h·ªèi ki·ªÉm tra ki·∫øn th·ª©c
"""

import os
from genQ import QuestionGenerator

def main():
    print("üß™ Test Generation c·ªßa C√¢u H·ªèi Ki·ªÉm Tra Ki·∫øn Th·ª©c")
    print("=" * 60)
    
    # L·∫•y danh s√°ch file PDF trong th∆∞ m·ª•c hi·ªán t·∫°i
    pdf_files = [f for f in os.listdir('.') if f.endswith('.pdf')]
    
    if not pdf_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong th∆∞ m·ª•c hi·ªán t·∫°i")
        print("üí° H√£y copy m·ªôt file PDF v√†o th∆∞ m·ª•c ai/ ƒë·ªÉ test")
        return
    
    print(f"üìö T√¨m th·∫•y {len(pdf_files)} file PDF:")
    for i, pdf_file in enumerate(pdf_files, 1):
        print(f"  {i}. {pdf_file}")
    
    # Ch·ªçn file PDF
    if len(pdf_files) == 1:
        selected_pdf = pdf_files[0]
        print(f"\n‚úÖ T·ª± ƒë·ªông ch·ªçn: {selected_pdf}")
    else:
        try:
            choice = int(input(f"\nCh·ªçn file PDF (1-{len(pdf_files)}): ")) - 1
            if 0 <= choice < len(pdf_files):
                selected_pdf = pdf_files[choice]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                return
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
            return
    
    print(f"\nüéØ ƒêang test v·ªõi file: {selected_pdf}")
    print("-" * 60)
    
    # Kh·ªüi t·∫°o generator
    generator = QuestionGenerator()
    
    # Test v·ªõi s·ªë c√¢u h·ªèi nh·ªè
    test_cases = [
        {"num_questions": 3, "description": "Test c∆° b·∫£n (3 c√¢u)"},
        {"num_questions": 5, "description": "Test v·ª´a (5 c√¢u)"},
        {"num_questions": 10, "description": "Test batch (10 c√¢u)"}
    ]
    
    for test_case in test_cases:
        print(f"\nüî¨ {test_case['description']}")
        print("-" * 40)
        
        try:
            result = generator.generate_questions_from_pdf(
                selected_pdf, 
                test_case["num_questions"]
            )
            
            if result and "questions" in result:
                num_generated = len(result["questions"])
                print(f"‚úÖ Th√†nh c√¥ng: {num_generated}/{test_case['num_questions']} c√¢u")
                
                # Hi·ªÉn th·ªã 1-2 c√¢u m·∫´u
                print("\nüìã C√¢u h·ªèi m·∫´u:")
                for i, q in enumerate(result["questions"][:2], 1):
                    print(f"\nC√¢u {q.get('id', i)}: {q.get('question', 'N/A')}")
                    print(f"ƒê√°p √°n ƒë√∫ng: {q.get('correct_answer', 'N/A')}")
                    print(f"G·ª£i √Ω: {q.get('hint', 'N/A')}")
                
                # L∆∞u k·∫øt qu·∫£ test
                output_file = f"test_result_{test_case['num_questions']}q.json"
                generator.save_questions_to_file(result, output_file)
                print(f"üíæ ƒê√£ l∆∞u: {output_file}")
                
            else:
                print("‚ùå Th·∫•t b·∫°i: Kh√¥ng sinh ƒë∆∞·ª£c c√¢u h·ªèi")
                
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
        
        print("-" * 40)
    
    print("\nüéâ Ho√†n th√†nh test!")
    print("üìÇ Ki·ªÉm tra c√°c file k·∫øt qu·∫£: test_result_*.json")

if __name__ == "__main__":
    main()
