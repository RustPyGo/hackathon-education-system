import PyPDF2
import os
import sys
from pathlib import Path

def pdf_to_text(pdf_path, output_path="pdfToText.txt"):
    """
    Chuy·ªÉn ƒë·ªïi file PDF sang text v√† l∆∞u v√†o file v·ªõi x·ª≠ l√Ω l·ªói robust
    
    Args:
        pdf_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
        output_path (str): ƒê∆∞·ªùng d·∫´n file output (m·∫∑c ƒë·ªãnh: pdfToText.txt)
    """
    try:
        # Ki·ªÉm tra file PDF c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(pdf_path):
            print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file PDF: {pdf_path}")
            return False
        
        # M·ªü file PDF v·ªõi nhi·ªÅu c√°ch x·ª≠ l√Ω l·ªói
        print(f"üìÑ ƒêang m·ªü PDF: {pdf_path}")
        
        with open(pdf_path, 'rb') as file:
            try:
                pdf_reader = PyPDF2.PdfReader(file)
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc PDF: {str(e)}")
                print("üí° Th·ª≠ v·ªõi strict=False...")
                try:
                    pdf_reader = PyPDF2.PdfReader(file, strict=False)
                except Exception as e2:
                    print(f"‚ùå V·∫´n l·ªói: {str(e2)}")
                    return False
            
            # Ki·ªÉm tra s·ªë trang
            try:
                num_pages = len(pdf_reader.pages)
                print(f"ÔøΩ PDF c√≥ {num_pages} trang")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh s·ªë trang: {str(e)}")
                return False
            
            # Tr√≠ch xu·∫•t text t·ª´ t·∫•t c·∫£ c√°c trang v·ªõi x·ª≠ l√Ω l·ªói t·ª´ng trang
            text_content = ""
            successful_pages = 0
            failed_pages = []
            
            for page_num in range(num_pages):
                try:
                    print(f"üîÑ ƒêang x·ª≠ l√Ω trang {page_num + 1}/{num_pages}...", end="")
                    
                    page = pdf_reader.pages[page_num]
                    
                    # Th·ª≠ nhi·ªÅu c√°ch extract text
                    page_text = ""
                    try:
                        page_text = page.extract_text()
                    except Exception as e1:
                        print(f" [L·ªói method 1: {str(e1)[:50]}]", end="")
                        try:
                            # Th·ª≠ c√°ch kh√°c
                            page_text = page.extractText()  # Ph∆∞∆°ng th·ª©c c≈©
                        except Exception as e2:
                            print(f" [L·ªói method 2: {str(e2)[:50]}]", end="")
                            page_text = f"[TRANG {page_num + 1}: KH√îNG TH·ªÇ TR√çCH XU·∫§T TEXT]"
                    
                    # Th√™m header cho m·ªói trang
                    text_content += f"\n{'='*50}\n"
                    text_content += f"TRANG {page_num + 1}\n"
                    text_content += f"{'='*50}\n"
                    
                    if page_text.strip():
                        text_content += page_text + "\n"
                        successful_pages += 1
                        print(" ‚úÖ")
                    else:
                        text_content += f"[TRANG TR·ªêNG HO·∫∂C KH√îNG C√ì TEXT]\n"
                        print(" ‚ö†Ô∏è (tr·ªëng)")
                    
                except Exception as e:
                    failed_pages.append(page_num + 1)
                    print(f" ‚ùå L·ªói: {str(e)[:50]}")
                    
                    # Th√™m th√¥ng b√°o l·ªói v√†o n·ªôi dung
                    text_content += f"\n{'='*50}\n"
                    text_content += f"TRANG {page_num + 1} - L·ªñI\n"
                    text_content += f"{'='*50}\n"
                    text_content += f"[L·ªñI TR√çCH XU·∫§T: {str(e)}]\n"
                    
                    # Th·ª≠ ti·∫øp trang ti·∫øp theo thay v√¨ d·ª´ng
                    continue
            
            # L∆∞u text v√†o file
            try:
                with open(output_path, 'w', encoding='utf-8') as output_file:
                    output_file.write(text_content)
                print(f"üíæ ƒê√£ l∆∞u text v√†o: {output_path}")
            except Exception as e:
                print(f"‚ùå L·ªói l∆∞u file: {str(e)}")
                return False
            
            # Th·ªëng k√™ chi ti·∫øt
            char_count = len(text_content)
            word_count = len(text_content.split())
            
            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print(f"üìä Th·ªëng k√™:")
            print(f"   - T·ªïng s·ªë trang: {num_pages}")
            print(f"   - Trang x·ª≠ l√Ω th√†nh c√¥ng: {successful_pages}")
            print(f"   - Trang b·ªã l·ªói: {len(failed_pages)}")
            if failed_pages:
                print(f"   - C√°c trang l·ªói: {failed_pages}")
            print(f"   - S·ªë k√Ω t·ª±: {char_count:,}")
            print(f"   - S·ªë t·ª´: {word_count:,}")
            print(f"   - File ƒë·∫ßu ra: {output_path}")
            print(f"   - K√≠ch th∆∞·ªõc: {os.path.getsize(output_path):,} bytes")
            
            # C·∫£nh b√°o n·∫øu c√≥ trang l·ªói
            if failed_pages:
                print(f"\n‚ö†Ô∏è C·∫¢NH B√ÅO: {len(failed_pages)} trang kh√¥ng th·ªÉ x·ª≠ l√Ω!")
                print("üí° G·ª£i √Ω:")
                print("   - PDF c√≥ th·ªÉ b·ªã h·ªèng ho·∫∑c m√£ h√≥a")
                print("   - Th·ª≠ v·ªõi PDF reader kh√°c")
                print("   - Ki·ªÉm tra quy·ªÅn truy c·∫≠p file")
            
            return True
            
    except MemoryError:
        print("‚ùå L·ªói: Kh√¥ng ƒë·ªß b·ªô nh·ªõ ƒë·ªÉ x·ª≠ l√Ω PDF")
        print("üí° G·ª£i √Ω: Th·ª≠ v·ªõi file PDF nh·ªè h∆°n ho·∫∑c tƒÉng RAM")
        return False
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file: {pdf_path}")
        return False
    except PermissionError:
        print(f"‚ùå L·ªói: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file: {pdf_path}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        print(f"‚ùå Type: {type(e).__name__}")
        return False

def main():
    """
    H√†m ch√≠nh v·ªõi x·ª≠ l√Ω l·ªói c·∫£i ti·∫øn
    """
    print("üîÑ PDF TO TEXT CONVERTER (Enhanced)")
    print("=" * 40)
    
    # T√¨m file PDF trong th∆∞ m·ª•c hi·ªán t·∫°i
    pdf_files = list(Path(".").glob("*.pdf"))
    
    if pdf_files:
        print("üìã File PDF t√¨m th·∫•y:")
        for i, pdf_file in enumerate(pdf_files, 1):
            try:
                file_size = os.path.getsize(pdf_file) / 1024  # KB
                print(f"   {i}. {pdf_file.name} ({file_size:.1f} KB)")
            except Exception:
                print(f"   {i}. {pdf_file.name} (Kh√¥ng th·ªÉ ƒë·ªçc k√≠ch th∆∞·ªõc)")
        
        try:
            choice = input(f"\nüî¢ Ch·ªçn file (1-{len(pdf_files)}) ho·∫∑c nh·∫≠p ƒë∆∞·ªùng d·∫´n kh√°c: ")
            
            if choice.isdigit() and 1 <= int(choice) <= len(pdf_files):
                pdf_path = str(pdf_files[int(choice) - 1])
            else:
                pdf_path = choice.strip('"').strip("'")  # Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p
                
        except (ValueError, KeyboardInterrupt):
            print("\nüëã ƒê√£ h·ªßy!")
            return
    else:
        print("üìù Kh√¥ng t√¨m th·∫•y file PDF trong th∆∞ m·ª•c hi·ªán t·∫°i")
        pdf_path = input("üìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file PDF: ").strip('"').strip("'")
    
    if not pdf_path:
        print("‚ùå Kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n file!")
        return
    
    # X·ª≠ l√Ω PDF
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {pdf_path}")
    success = pdf_to_text(pdf_path)
    
    if success:
        print("\n‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
    else:
        print("\n‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i!")
        print("\nüí° Troubleshooting:")
        print("   1. Ki·ªÉm tra file PDF c√≥ h·ª£p l·ªá kh√¥ng")
        print("   2. Th·ª≠ c√†i ƒë·∫∑t l·∫°i PyPDF2: pip install --upgrade PyPDF2")
        print("   3. Th·ª≠ v·ªõi file PDF kh√°c ƒë·ªÉ test")
        print("   4. Ki·ªÉm tra dung l∆∞·ª£ng RAM c√≤n l·∫°i")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng!")
    except Exception as e:
        print(f"\n‚ùå L·ªói nghi√™m tr·ªçng: {str(e)}")
        sys.exit(1)